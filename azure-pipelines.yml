trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '3.1.100'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-16.04'
      demands:
        - npm

    variables:  
      - group: Artifact
      - group: Configuration


    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - script: "mv Tailspin.SpaceGame.Web.zip  $(artifact_prefix)$(Build.BuildNumber).zip"
      displayName: "Renaming artifact Tailspin.SpaceGame.Web.zip to $(artifact_prefix)$(Build.BuildNumber).zip"
      workingDirectory: "$(Build.ArtifactStagingDirectory)/$(buildConfiguration)"

      
    - task: ArtifactoryGenericUpload@2
      displayName: 'Uploading artifact to JFROG'
      inputs:
        artifactoryService: 'JFROG-PUSHIT'
        specSource: 'taskConfiguration'
        fileSpec: |
          {
            "files": [
              {
                "pattern": "$(Build.ArtifactStagingDirectory)/$(buildConfiguration)/*.zip",
                "target": "$(repository)",
                  "props": "type=zip;status=ready"
              }
            ]
          }
        failNoOp: true
        

- stage: 'Integration'
  displayName: 'Integrate with CDA Platform'
  jobs: 
  - job: 'Integration'
    pool: server
    variables:  
      - group: Artifact
      - group: Configuration

    steps:    
    - task: InvokeRESTAPI@1
      displayName: 'Creating the package $(Build.BuildNumber) in CDA'
      inputs:
        connectionType: 'connectedServiceName'
        serviceConnection: 'ARUS-CDA'
        method: 'POST'
        headers: |
          {
          "Content-Type":"application/json", 
          "AuthToken": "$(system.AccessToken)"
          }
        body: |
          {
            "application":"pushit-game",
            "name": "$(Build.BuildNumber)",
            "custom_type": "Deployment",
            "folder": "DEFAULT",
            "components": [
              {
                "component": {
                  "name": "site"
                },
                "artifact": {
                  "name": "$(artifact_prefix)$(Build.BuildNumber).zip",
                  "artifact_source": {
                    "name": "$(artifact_source)"
                  },
                  "custom": {
                    "source_path": "$(base_repository)/$(repository)/$(artifact_prefix)$(Build.BuildNumber).zip"
                  }
                }
              }
            ]
          }
        urlSuffix: '/packages'
        waitForCompletion: 'false'

    - task: InvokeRESTAPI@1
      displayName: 'CDA Workflow Execution'
      inputs:
        connectionType: 'connectedServiceName'
        serviceConnection: 'ARUS-CDA'
        method: 'POST'
        headers: |
          {
          "Content-Type":"application/json", 
          "AuthToken": "$(system.AccessToken)"
          }
        body: |
          {
              "application": {
                  "name": "pushit-game"
              },
              "workflow": {
                  "name": "Deploy"
              },
              "package": "$(Build.BuildNumber)",
              "deployment_profile": "LAB",
              "needs_manual_start": false,
              "install_mode": "OverwriteExisting"
          }
        urlSuffix: 'executions'
        waitForCompletion: 'false'